// Piezo Resonator — Dual‑Oscillator Φⁿ vs 2ᵐ Generator
// --------------------------------------------------------
// Generates two square‑wave outputs:
//   OUT_PHI  -> frequency = f0 * pow(PHI, n)
//   OUT_TWO  -> frequency = f0 * pow(2,  m)
// The two signals drive a piezo disc glued on a resonant surface.
// Use digital pins 9 and 10 (both PWM capable on Arduino UNO)
// --------------------------------------------------------
// Hardware:
//  * Arduino UNO/Nano (ATmega328P)
//  * Piezo disc/buzzer 27 mm (passive)
//  * 2 × 100 Ω resistors (series damping)
//  * 1 kΩ potentiomètre (tune f0)
//  * DPDT switch (select ±n/±m ranges) — optional
//  * Breadboard + jump wires
//  * Optional: oscilloscope or PC sound card to monitor

// === USER SETTINGS ===
const float f0      = 100.0;     // base frequency in Hz (adjust via pot if desired)
const float phi     = 1.6180339; // golden ratio Φ
volatile float nVal = 2.0;       // initial exponent n  (can be negative)
volatile float mVal = 2.0;       // initial exponent m  (can be negative)

// Pins
const uint8_t PIN_PHI = 9;  // OC1A
const uint8_t PIN_TWO = 10; // OC1B

// --- Helpers ------------------------------------------------------------
void setupTimer1(float freqA, float freqB) {
  // Configure Timer1 for two distinct square waves on 9 & 10
  // Using phase‑correct PWM mode (mode 10, ICR1 top)
  pinMode(PIN_PHI, OUTPUT);
  pinMode(PIN_TWO, OUTPUT);

  noInterrupts();

  TCCR1A = 0; TCCR1B = 0; TCNT1 = 0;
  TCCR1A |= (1<<COM1A1) | (1<<COM1B1); // non‑inverting on both outputs
  TCCR1A |= (1<<WGM11);               // mode 10: PWM, phase‑correct, ICR1 top
  TCCR1B |= (1<<WGM13);
  TCCR1B |= (1<<CS10);                // no prescaler -> clk = 16 MHz

  ICR1  = (uint16_t)(F_CPU / (2 * freqA));   // use channel A freq for TOP
  OCR1A = ICR1 / 2;                           // 50 % duty cycle
  OCR1B = (uint16_t)(F_CPU / (2 * freqB) / 2);

  interrupts();
}

void updateFrequencies() {
  float fPhi = f0 * pow(phi, nVal);
  float fTwo = f0 * pow(2.0, mVal);
  setupTimer1(fPhi, fTwo);
}

void setup() {
  Serial.begin(9600);
  Serial.println(F("Piezo Resonator Φⁿ vs 2ᵐ"));
  updateFrequencies();
}

void loop() {
  // Simple serial UI: send commands like "n 1.5" or "m -3" or "f0 200"
  if (Serial.available()) {
    char var = Serial.read();
    if (var == 'n' || var == 'm' || var == 'b') { // b for base f0
      float val = Serial.parseFloat();
      if (var == 'n') nVal = val;
      if (var == 'm') mVal = val;
      if (var == 'b') f0   = val;
      Serial.print("Updated: "); Serial.print(var); Serial.print(" = "); Serial.println(val);
      updateFrequencies();
    }
  }
}
