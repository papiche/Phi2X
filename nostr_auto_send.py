#!/usr/bin/env python3
"""
Script automatis√© pour envoyer des √©v√©nements NOSTR
Con√ßu pour √™tre utilis√© par microledger.me.sh
"""
import sys
import json
import asyncio
import argparse
from pynostr.event import Event, EventKind
from pynostr.relay_manager import RelayManager
from pynostr.key import PrivateKey

DEFAULT_RELAYS = ["wss://relay.copylaradio.com"]
CONNECT_TIMEOUT = 10
PUBLISH_TIMEOUT = 30

async def send_nostr_event_auto(private_key_nsec: str, content: str, relays: list = None):
    """Envoie un √©v√©nement NOSTR de mani√®re automatis√©e"""
    if relays is None:
        relays = DEFAULT_RELAYS
    
    try:
        print(f"üîå Connexion aux relais: {', '.join(relays)}")
        relay_manager = RelayManager()
        
        for relay_url in relays:
            relay_manager.add_relay(relay_url)
        
        print("‚è≥ Ouverture des connexions...")
        relay_manager.open_connections()
        
        # Attendre la connexion
        await asyncio.sleep(2)
        
        connected_count = sum(1 for r_obj in relay_manager.relays.values() if r_obj.connected)
        if connected_count == 0:
            print("‚ùå Aucune connexion √©tablie")
            return False
        
        print(f"‚úÖ Connect√© √† {connected_count}/{len(relays)} relais")
        
        # Cr√©er et signer l'√©v√©nement
        priv_key_obj = PrivateKey.from_nsec(private_key_nsec)
        event = Event(
            kind=EventKind.TEXT_NOTE, 
            content=content, 
            tags=[["t", "frd"], ["t", "FRD"], ["t", "ipfs"], ["t", "knowledge"]], 
            pubkey=priv_key_obj.public_key.hex()
        )
        priv_key_obj.sign_event(event)
        
        print(f"üìù √âv√©nement cr√©√©: {event.id}")
        print(f"üì§ Publication...")
        
        # Publier l'√©v√©nement
        relay_manager.publish_event(event)
        
        # Attendre les r√©ponses
        await asyncio.sleep(3)
        
        relay_manager.close_connections()
        
        print("‚úÖ √âv√©nement publi√© avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        if 'relay_manager' in locals():
            relay_manager.close_connections()
        return False

async def main():
    parser = argparse.ArgumentParser(description='Envoi automatis√© d\'√©v√©nements NOSTR')
    parser.add_argument('--nsec', required=True, help='Cl√© priv√©e NOSTR (nsec)')
    parser.add_argument('--content', required=True, help='Contenu du message')
    parser.add_argument('--relays', nargs='+', default=DEFAULT_RELAYS, help='Liste des relais')
    
    args = parser.parse_args()
    
    success = await send_nostr_event_auto(args.nsec, args.content, args.relays)
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    asyncio.run(main())
